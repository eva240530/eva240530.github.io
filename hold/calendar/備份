//月曆物件
const prevBtn = document.querySelector(".prevBtn");
const nextBtn = document.querySelector(".nextBtn");
const chooseMon = document.querySelector(".chooseMonth");
const calendarDays = document.querySelector(".calendar-days");
const myModal = document.querySelector("#staticBackdrop");
const nowbtn = document.querySelector(".nowbtn");

//事件框的物件
const addEvent = document.querySelector(".add-btn");
const cancelEvent = document.querySelector(".cancel-btn");
const inputEvent = document.querySelector("#input-event");
const inputDate = document.querySelector("#input-date");
const inputTime = document.querySelector("#input-time");
const inputLocal = document.querySelector("#input-local");
const inputColor = document.querySelector("#ColorInput");

//瀏覽器存檔用的Key
const key = "AllEventList";

//日期初始化
const currentDate = new Date();
const now = new Date(Date.now());

//新增事件監聽器
window.addEventListener("DOMContentLoaded", initDate);
nowbtn.addEventListener("click", initDate);
prevBtn.addEventListener("click", prevMonth);
nextBtn.addEventListener("click", nextMonth);
calendarDays.addEventListener("click", showEvent);
addEvent.addEventListener("click", saveEvent);

//切換月份函式
function initDate() {
  currentDate.setMonth(now.getMonth());
  updateCalendar();
  ShowTodoList();
}
function prevMonth() {
  currentDate.setMonth(currentDate.getMonth() - 1);
  updateCalendar();
  ShowTodoList();
}
function nextMonth() {
  currentDate.setMonth(currentDate.getMonth() + 1);
  updateCalendar();
  ShowTodoList();
}
//更新月份
function updateCalendar() {
  chooseMon.textContent = `${
    currentDate.getMonth() + 1
  }月 ${currentDate.getFullYear()}`;
  calendarDays.innerHTML = "";
  updateDays();
}
//更新日期
function updateDays() {
  //目標月份的最後一日
  const getTargetMonthDays = new Date(
    currentDate.getFullYear(),
    currentDate.getMonth() + 1,
    0
  ).getDate();

  //目標月份首日星期
  const getFirstWeekday = new Date(
    currentDate.getFullYear(),
    currentDate.getMonth(),
    1
  ).getDay();

  //前月的日期
  for (let fountDay = getFirstWeekday; fountDay >= 1; fountDay--) {
    const getPrevMonthDays = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      0
    );

    const dayDiv = document.createElement("div");
    dayDiv.textContent = getPrevMonthDays.getDate() - fountDay + 1;
    dayDiv.setAttribute("id", getPrevMonthDays.toLocaleDateString());
    dayDiv.classList.add("day", "border", "text-body-tertiary");
    const dayul = document.createElement("ul");
    dayul.setAttribute("id", `ul${getPrevMonthDays.toLocaleDateString()}`);
    dayDiv.appendChild(dayul);
    calendarDays.appendChild(dayDiv);
  }

  //當月日期
  for (let day = 1; day <= getTargetMonthDays; day++) {
    const Theday = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      day
    );
    const dayDiv = document.createElement("div");
    let ThedayId = Theday.toLocaleDateString();
    dayDiv.textContent = day;
    dayDiv.classList.add("day", "border");
    dayDiv.setAttribute("id", ThedayId);
    const dayul = document.createElement("ul");
    dayul.setAttribute("id", `ul${ThedayId}`);
    dayDiv.appendChild(dayul);
    calendarDays.appendChild(dayDiv);

    if (Theday.toDateString() === new Date().toDateString()) {
      dayDiv.classList.add("today");
    }
  }

  //次月的日期
  if ((getTargetMonthDays % 7) + getFirstWeekday < 7) {
    for (
      let afterDay = 1;
      (getTargetMonthDays % 7) + getFirstWeekday + afterDay <= 7;
      afterDay++
    ) {
      const NextMonthday = new Date(
        currentDate.getFullYear(),
        currentDate.getMonth() + 1,
        afterDay
      );
      const dayDiv = document.createElement("div");
      dayDiv.textContent = afterDay;
      dayDiv.classList.add("day", "border", "text-body-tertiary");
      dayDiv.setAttribute("id", NextMonthday.toLocaleDateString());
      const dayul = document.createElement("ul");
      dayul.setAttribute("id", `ul${NextMonthday.toLocaleDateString()}`);
      dayDiv.appendChild(dayul);
      calendarDays.appendChild(dayDiv);
    }
  }
  if ((getTargetMonthDays % 7) + getFirstWeekday > 7) {
    for (
      let afterDay = 1;
      (getTargetMonthDays % 7) + getFirstWeekday + afterDay <= 14;
      afterDay++
    ) {
      const NextMonthday = new Date(
        currentDate.getFullYear(),
        currentDate.getMonth() + 1,
        afterDay
      );
      const dayDiv = document.createElement("div");
      dayDiv.textContent = afterDay;
      dayDiv.classList.add("day", "border", "text-body-tertiary");
      dayDiv.setAttribute("id", NextMonthday.toLocaleDateString());
      const dayul = document.createElement("ul");
      dayul.setAttribute("id", `ul${NextMonthday.toLocaleDateString()}`);
      dayDiv.appendChild(dayul);
      calendarDays.appendChild(dayDiv);
    }
  }
}
//儲存事件
function saveEvent() {
  const EvenItem = inputEvent.value.trim();
  if (!EvenItem || !inputDate.value || !inputTime.value) {
    clearInput();
    return;
  }
  //事件清單
  const EventList = {
    id: new Date(inputDate.value).toLocaleDateString(),
    // EventDate: inputDate.value,
    toDoList: [
      {
        id: new Date().valueOf(),
        EventName: EvenItem,
        time: inputTime.value,
        local: inputLocal.value.trim(),
        color: inputColor.value,
      },
    ],
  };
  //存檔至localStorage
  saveToDoList(EventList);
  //新增DOM
  ShowTodoList();
  //清空事件框
  clearInput();
}
//至localStorage取出所有事件
function getTodoListFromStorage() {
  const AllEvent = localStorage.getItem(key);
  return AllEvent ? JSON.parse(AllEvent) : [];
}
//儲存所有事件至localStorage
function saveToDoListToLocalStorage(AllEventList) {
  const json = JSON.stringify(AllEventList);
  localStorage.setItem(key, json);
}
//事件存檔：取出全部事件後再push
function saveToDoList(EventList) {
  const AllEventList = getTodoListFromStorage();
  //利用判斷式找出是否有存在該日期物件
  let foundid = false;
  AllEventList.forEach((item) => {
    if (item.id === EventList.id) {
      item.toDoList.push(EventList.toDoList[0]);
      foundid = true;
    }
  });

  if (!foundid) {
    AllEventList.push(EventList);
  }

  saveToDoListToLocalStorage(AllEventList);
}
//清空事件框
function clearInput() {
  inputDate.value = "";
  inputEvent.value = "";
  inputTime.value = "";
  inputLocal.value = "";
  inputColor.value = "#563d7c";
}
//事件DOM創立
function createEvenItemHTML(EventList, EventDate) {
  return `<li class="mx-2" data-bs-toggle="modal" data-bs-target="#todolistCard${EventList.id}"  data-bs-toggle="modal" style="color:${EventList.color} ; border-left:2px solid ${EventList.color}">${EventList.time} ${EventList.local} / ${EventList.EventName}<div Class="modal fade" id="todolistCard${EventList.id}" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true" style="color:#000" >
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-2 fw-bolder ms-3 " style="color:${EventList.color}" id="staticBackdropLabel">${EventList.EventName}</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body fs-5">
                    <form>
                        <div class="row mb-3">
                            <label for="input-time" class="col-sm-3 col-form-label text-center">時間：</label>
                            <div class="col-sm-9 my-auto">
                                ${EventList.time}
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="input-local" class="col-sm-3 col-form-label text-center">地點：</label>
                            <div class="col-sm-9 my-auto">
                                ${EventList.local}
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="cancel-btn btn btn-danger " id="${EventList.id}">刪除</button>
                    <button type="button" class="${EventList.id} ${EventDate} cancel-btn btn btn-success ">更新</button>
                </div>
            </div>
        </div>
    </div>
    </li>  `;
}
//將ToDoList放置正確的DOM
function ShowTodoList() {
  const todoList = getTodoListFromStorage();
  if (!todoList) return;
  todoList.forEach((item) => {
    const ulEl = document.getElementById(`ul${item.id}`);
    if (!ulEl) return;
    ulEl.innerHTML = "";
    const sortToDolist = sortEvenList(item.toDoList);
    sortToDolist.forEach((list) => {
      const todoItem = createEvenItemHTML(list, item.id);
      ulEl.innerHTML += todoItem;
    });
  });
}
//對ToDoList進行時間排序
function sortEvenList(item) {
  // return AllEventList.forEach((item) =>
  return item.sort((a, b) => {
    if (item.length > 0) {
      //將時間轉換成[時,分]陣列，個別比較
      const TimeA = a.time.split(":").map(Number);
      const TimeB = b.time.split(":").map(Number);
      return TimeA[0] - TimeB[0] || TimeA[1] - TimeB[1];
    }
    return;
  });
}
//顯示事件列表
function showEvent(e) {
  if (e.target.textContent === "刪除") {
    removeEvent(e.target.id);
  }

  if (e.target.textContent === "更新") {
    console.dir(e.target);
    console.log(e.target);
  }
}

//刪除事件
function removeEvent(id) {
  const EventList = getTodoListFromStorage();
  EventList.forEach((item) => {
    const todolistItemIdx = item.toDoList.findIndex(
      (item) => `${item.id}` === `${id}`
    );
    if (todolistItemIdx > -1) {
      item.toDoList.splice(todolistItemIdx, 1);
    }
  });

  saveToDoListToLocalStorage(EventList);
  ShowTodoList();
}

//修改事件
function editEvent(id) {
  const EventList = getTodoListFromStorage();

  console.log(getTodoListFromStorage());
  EventList.forEach((item) => {
    console.log(item.toDoList);
    const todolistItemIdx = item.toDoList.findIndex(
      (item) => `${item.id}` === `${id}`
    );
    console.log(todolistItemIdx);
    if (todolistItemIdx > -1) {
      item.toDoList.splice(todolistItemIdx, 1);
    }
  });

  saveToDoListToLocalStorage(EventList);
  ShowTodoList();
}
